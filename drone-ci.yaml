kind: pipeline
type: docker
name: Cluster

environment:
  KOPS_STATE_STORE: s3://rbachkarou-kops

steps:
- name: Cluster install
  image: mclover45/kubernetes-kops
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
  commands:
  - ls -l
  - sh cluster-existing.sh
---
kind: pipeline
type: docker
name: Application

environment:
  KOPS_STATE_STORE: s3://rbachkarou-kops

steps:
- name: Application install
  image: mclover45/kubernetes-kops
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
  commands:
  - kops export kubeconfig wordsmith.rbachkarou.tl.scntl.com --admin
  - ls -l
  - kops validate cluster --wait 10m --state=s3://rbachkarou-kops
  # App install
  - helm install wordsmith-demo /drone/src/wordsmith/helm/wordsmith-demo
  # ingress install
  - kubectl apply -f ingress/ic-nginx-lb.yaml
  - kubectl apply -f ingress/app-ingress.yml
  # Give data
  - kubectl get svc --all-namespaces
  depends_on:
 - Cluster