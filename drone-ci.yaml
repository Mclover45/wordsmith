kind: pipeline
type: docker
name: Cluster

environment:
  KOPS_STATE_STORE: s3://rbachkarou-kops

steps:
- name: Cluster install
  image: mclover45/kubernetes-kops:v2
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
  commands:
  - ls -l
  - sh -c "StateExisting=$(aws s3 ls s3://rbachkarou-kops | grep -o  wordsmith.rbachkarou.tl.scntl.com) if [ "$StateExisting" = "wordsmith.rbachkarou.tl.scntl.com" ] then echo "Cluster already there" else kops create cluster --name=wordsmith.rbachkarou.tl.scntl.com --state=s3://rbachkarou-kops --zones=eu-central-1a --node-count=2 --node-size=t3.medium --master-size=t3.medium kops update cluster --name wordsmith.rbachkarou.tl.scntl.com --yes --admin --state=s3://rbachkarou-kops kops validate cluster --wait 10m --state=s3://rbachkarou-kops istioctl install --set profile=minimal -y kubectl create namespace wordsmith kubectl label namespace wordsmith istio-injection=enabled kubectl apply -f istio-addons/kiali.yaml kubectl apply -f istio-addons/grafana.yaml kubectl apply -f istio-addons/prometheus.yaml fi"

--- 

kind: pipeline
type: docker
name: Application

environment:
  KOPS_STATE_STORE: s3://rbachkarou-kops

steps:
- name: Application install
  image: mclover45/kubernetes-kops:v2
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
  commands:
  - kops export kubeconfig wordsmith.rbachkarou.tl.scntl.com --admin
  - ls -l
  - kops validate cluster --wait 10m --state=s3://rbachkarou-kops
  # App install
  #- helm install wordsmith-demo helm/wordsmith-demo
  # ingress install
  - kubectl apply -f ingress/ic-nginx-lb.yaml
  - kubectl apply -f ingress/app-ingress.yml
  # Give data
  - kubectl get svc --all-namespaces
depends_on:
- Cluster