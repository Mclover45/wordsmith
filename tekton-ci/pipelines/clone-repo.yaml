apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: cat-branch-readme
spec:
  description: |
    cat-branch-readme takes a git repository and a branch name and
    prints the README.md file from that branch. This is an example
    Pipeline demonstrating the following:
      - Using the git-clone catalog Task to clone a branch
      - Passing a cloned repo to subsequent Tasks using a Workspace.
      - Ordering Tasks in a Pipeline using "runAfter" so that
        git-clone completes before we try to read from the Workspace.
      - Using a volumeClaimTemplate Volume as a Workspace.
      - Avoiding hard-coded paths by using a Workspace's path
        variable instead.
  params:
  - name: repo-url
    type: string
    description: The git repository URL to clone from.
  - name: branch-name
    type: string
    description: The git branch to clone.
  - name: ClusteName
    type: string
  - name: StateName
    type: string
  - name: AWS-KEY
    type: string
  - name: AWS-PRIVATE-KEY
    type: string
  - name: HOSTED_ZONE
    type: string
  - name: ARN-KEY
    type: string
  workspaces:
  - name: shared-data
    description: |
      This workspace will receive the cloned git repo and be passed
      to the next Task for the repo's README.md file to be read.
  tasks:
  - name: fetch-repo
    taskRef:
      name: git-clone
    workspaces:
    - name: output
      workspace: shared-data
    params:
    - name: url
      value: $(params.repo-url)
    - name: revision
      value: $(params.branch-name)
  - name: cat-readme
    runAfter: ["fetch-repo"]  # Wait until the clone is done before reading the readme.
    workspaces:
    - name: output
      workspace: shared-data
    taskSpec:
      workspaces:
      - name: output
      steps:
      - image: zshusers/zsh:4.3.15
        script: |
          #!/usr/bin/env zsh
          cat $(workspaces.output.path)/README.md
          cd $(workspaces.output.path)/
          pwd
  - name: cluster-install
    runAfter: ["fetch-repo"]
    taskRef:
      name: cluster-install
    workspaces:
    - name: output
      workspace: shared-data
    params:
    - name: ClusteName
      value: $(params.ClusteName)
    - name: StateName
      value: $(params.StateName)
    - name: AWS-KEY
      value: $(params.AWS-KEY)
    - name: AWS-PRIVATE-KEY
      value: $(params.AWS-PRIVATE-KEY)
  - name: ingress-install
    runAfter: ["cluster-install"]
    taskRef:
      name: ingress-install
    workspaces:
    - name: output
      workspace: shared-data
    params:
    - name: ClusteName
      value: $(params.ClusteName)
    - name: StateName
      value: $(params.StateName)
    - name: AWS-KEY
      value: $(params.AWS-KEY)
    - name: AWS-PRIVATE-KEY
      value: $(params.AWS-PRIVATE-KEY)
  - name: istio-install
    runAfter: ["ingress-install"]
    taskRef:
      name: istio-install
    workspaces:
    - name: output
      workspace: shared-data
    params:
    - name: ClusteName
      value: $(params.ClusteName)
    - name: StateName
      value: $(params.StateName)
    - name: AWS-KEY
      value: $(params.AWS-KEY)
    - name: AWS-PRIVATE-KEY
      value: $(params.AWS-PRIVATE-KEY)
  - name: sops-decrypt-value
    runAfter: ["fetch-repo"]
    taskRef:
      name: sops-decrypt-value
    workspaces:
    - name: output
      workspace: shared-data
    params:
    - name: ClusteName
      value: $(params.ClusteName)
    - name: StateName
      value: $(params.StateName)
    - name: AWS-KEY
      value: $(params.AWS-KEY)
    - name: AWS-PRIVATE-KEY
      value: $(params.AWS-PRIVATE-KEY)
    - name : ARN-KEY
      value: $(params.ARN-KEY)
  - name: app-install
    runAfter: ["istio-install"]
    taskRef:
      name: app-install
    workspaces:
    - name: output
      workspace: shared-data
    params:
    - name: ClusteName
      value: $(params.ClusteName)
    - name: StateName
      value: $(params.StateName)
    - name: AWS-KEY
      value: $(params.AWS-KEY)
    - name: AWS-PRIVATE-KEY
      value: $(params.AWS-PRIVATE-KEY)
  - name: update-dns-records
    runAfter: ["ingress-install"]
    taskRef:
      name: update-dns-records
    workspaces:
    - name: output
      workspace: shared-data
    params:
    - name: ClusteName
      value: $(params.ClusteName)
    - name: StateName
      value: $(params.StateName)
    - name: AWS-KEY
      value: $(params.AWS-KEY)
    - name: AWS-PRIVATE-KEY
      value: $(params.AWS-PRIVATE-KEY)
    - name: HOSTED_ZONE
      value: $(params.HOSTED_ZONE)



